#include "CLLink.h"
#include "CLObject.clc"

CLObjectList:CLObject
{

	struct CLLink* 	head;		// pointer to first link
	struct CLLink* 	last;		// pointer to last link
	unsigned long	length;		// element count of list
	
	
	// constructor

	void init( )
    {

		CLObject:init( self  );
	
		head 	= NULL;
		last 	= NULL;
		length	= 0;
    
    }

	
	// destructor

	void destruct( )
	{
		
		removeAllObjects( );

		CLObject:destruct( self );
	
	}
	
	
	// appends object to list
	
	void addObject( CLObject* theObject )
	{

		struct CLLink* newLink;
	
		theObject.retain( );

		// create link
		
		newLink = malloc( sizeof( struct CLLink ) );
		newLink->data = theObject;
		newLink->next = NULL;

		if ( head == NULL ) head = newLink;
		else last->next = newLink;

		last	= newLink;
		length	= length + 1;
		
	}
	
	
	// adds object at given index
	
	void addObjectAtIndex(	CLObject*		theObject ,
							unsigned long	theIndex )
	{
	
		struct CLLink*	link;
		struct CLLink*	lastLink;
		struct CLLink*  newLink;
		unsigned long	position;
		
		// init
		
		lastLink = NULL;
		link	 = head;
		position = 0;

		theObject.retain( );

		while ( link != NULL )
		{

			if ( position == theIndex )
			{

				newLink = malloc( sizeof( struct CLLink ) );
				newLink->data = theObject;
				newLink->next = link;
				
				if ( lastLink != NULL )	lastLink->next = newLink;
				else head = newLink;
				length = length + 1;
				
				return;
			
			}

			position += 1;
			lastLink = link;
			link = link->next;

		}
	
	}


	// appends given object list to object list

	void addObjectsInObjectList( CLObjectList* theObjectList )
	{

		struct CLLink* link;

		if ( theObjectList.length > 0 )
		{

			link = theObjectList.head;

			while ( link != NULL )
			{
			
				addObject( link->data );
				
				link = link->next;
				
			}

		}
		
	}
	

	// removes data from data chain
	
	void removeObject( CLObject* theObject )
	{

		struct CLLink* link;
		struct CLLink* prev;

		CLObject* oneObject;
		
		// init
		
		link = head;
		prev = NULL;
		
		while ( link != NULL )
		{
			
			if ( link->data == theObject )
			{
			
				if		( link->next == NULL && prev != NULL )
				{
					prev->next = NULL;
					last = prev;
				}
				else if ( link->next != NULL && prev == NULL )
				{
					head = link->next;
				}
				else if ( link->next != NULL && prev != NULL )
				{
					prev->next = link->next;
				}
				else
				{
					head = NULL;
					last = NULL;
				}
				
				oneObject = link->data;
				oneObject.release( );

				free( link );
				length -= 1;
				
				return;
				
			}
			
			prev = link;
			link = link->next;
					
		}
			
	}
	
	
	// removes object at given index
	
	CLObject* removeObjectAtIndex( unsigned long theIndex )
	{
	
		// !!! a more optimized solution is needed
	
		CLObject* object;
		
		// init
		
		object = objectAtIndex( theIndex );
		if ( object != NULL ) removeObject( object );
		return object;
	
	}

	
	// empties object list
	
	void removeAllObjects( )
	{
	
		struct CLLink* link;
		struct CLLink* prev;

		CLObject* object;
		
		// init
		
		link = head;
		prev = NULL;

		while ( link != NULL ) 
		{
		
			prev = link;
			link = link->next;
			
			object = prev->data;
			object.release( );
			
			free( prev );
			
		}

		head 	= NULL;
		last 	= NULL;
		length	= 0;
	
	}
			

	// returns object at given index

	CLObject* objectAtIndex( unsigned long theIndex )
	{

		struct CLLink* link;
		unsigned long position;
		
		// init
		
		link = head;
		position = 0;

		while ( link != NULL )
		{

			if ( position == theIndex ) return link->data;

			position += 1;
			link = link->next;

		}

		return NULL;

	}
	
	
	// check if object is in the list
	
	char containsObject( CLObject* theObject )
	{
	
		struct CLLink* link;
		
		// init
		
		link = head;
		
		while ( link != NULL )
		{
					
			if ( link->data == theObject ) return 1;
			
			link = link->next;
					
		}
		
		return 0;
	
	}
	
	
	// returns index of data
	
	unsigned long indexOfObject( CLObject*	theObject )
	{
	
		unsigned long index;
		struct CLLink* link;
		
		// init
		
		index = 0;
		link = head;
		
		while ( link != NULL )
		{
					
			if ( link->data == theObject ) return index;

			index += 1;
			link = link->next;
					
		}
		
		return 0;
	
	}


	// returns first object
	
	CLObject* firstObject( )
	{
	
		if ( head != NULL ) return head->data;
		return NULL;
	
	}
	
	
	// returns last object
	
	CLObject* lastObject( )
	{
	
		if ( last != NULL ) return last->data;
		return NULL;
	
	}
	

	// describes instance		

	void describe( )
	{
	
		struct CLLink* link;
		CLObject* object;
		
		// init
		
		link = head;
		
		while ( link != NULL )
		{
		
			object = link->data;
			object.describe( );
			printf( " " );
			link = link->next;
			
		}
	
	}

}